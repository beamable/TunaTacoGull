//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.TunaTacoGull.TunaTacoGull"/> </summary
    public sealed class TunaTacoGullClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public TunaTacoGullClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "TunaTacoGull";
            }
        }
        
        /// <summary>
        /// Call the CreateGame method on the TunaTacoGull microservice
        /// <see cref="Beamable.TunaTacoGull.TunaTacoGull.CreateGame"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.GameState> CreateGame(long hostPlayerId, long joinPlayerId)
        {
            object raw_hostPlayerId = hostPlayerId;
            object raw_joinPlayerId = joinPlayerId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("hostPlayerId", raw_hostPlayerId);
            serializedFields.Add("joinPlayerId", raw_joinPlayerId);
            return this.Request<Beamable.Common.GameState>("TunaTacoGull", "CreateGame", serializedFields);
        }
        
        /// <summary>
        /// Call the SubmitActual method on the TunaTacoGull microservice
        /// <see cref="Beamable.TunaTacoGull.TunaTacoGull.SubmitActual"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> SubmitActual(string matchId, UserSelection selection)
        {
            object raw_matchId = matchId;
            object raw_selection = selection;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("matchId", raw_matchId);
            serializedFields.Add("selection", raw_selection);
            return this.Request<Beamable.Common.Unit>("TunaTacoGull", "SubmitActual", serializedFields);
        }
        
        /// <summary>
        /// Call the ShowHint method on the TunaTacoGull microservice
        /// <see cref="Beamable.TunaTacoGull.TunaTacoGull.ShowHint"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> ShowHint(string matchId, UserSelection selection)
        {
            object raw_matchId = matchId;
            object raw_selection = selection;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("matchId", raw_matchId);
            serializedFields.Add("selection", raw_selection);
            return this.Request<Beamable.Common.Unit>("TunaTacoGull", "ShowHint", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersTunaTacoGullClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int64 : MicroserviceClientDataWrapper<long>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterUserSelection : MicroserviceClientDataWrapper<UserSelection>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForTunaTacoGullClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<TunaTacoGullClient>();
        }
        
        public static TunaTacoGullClient TunaTacoGull(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<TunaTacoGullClient>();
        }
    }
}
